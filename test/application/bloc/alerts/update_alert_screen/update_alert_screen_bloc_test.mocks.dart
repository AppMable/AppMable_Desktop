// Mocks generated by Mockito 5.3.2 from annotations
// in appmable_desktop/test/application/bloc/alerts/update_alert_screen/update_alert_screen_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:appmable_desktop/application/bloc/alerts/alerts_screen/alerts_screen_bloc.dart'
    as _i2;
import 'package:appmable_desktop/domain/model/objects/alert.dart' as _i6;
import 'package:appmable_desktop/domain/services/alert_service.dart' as _i5;
import 'package:flutter_bloc/flutter_bloc.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeAlertsScreenState_0 extends _i1.SmartFake
    implements _i2.AlertsScreenState {
  _FakeAlertsScreenState_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [AlertsScreenBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockAlertsScreenBloc extends _i1.Mock implements _i2.AlertsScreenBloc {
  MockAlertsScreenBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.AlertsScreenState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeAlertsScreenState_0(
          this,
          Invocation.getter(#state),
        ),
      ) as _i2.AlertsScreenState);
  @override
  _i3.Stream<_i2.AlertsScreenState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i3.Stream<_i2.AlertsScreenState>.empty(),
      ) as _i3.Stream<_i2.AlertsScreenState>);
  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
      ) as bool);
  @override
  void add(_i2.AlertsScreenEvent? event) => super.noSuchMethod(
        Invocation.method(
          #add,
          [event],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onEvent(_i2.AlertsScreenEvent? event) => super.noSuchMethod(
        Invocation.method(
          #onEvent,
          [event],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void emit(_i2.AlertsScreenState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void on<E extends _i2.AlertsScreenEvent>(
    _i4.EventHandler<E, _i2.AlertsScreenState>? handler, {
    _i4.EventTransformer<E>? transformer,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #on,
          [handler],
          {#transformer: transformer},
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onTransition(
          _i4.Transition<_i2.AlertsScreenEvent, _i2.AlertsScreenState>?
              transition) =>
      super.noSuchMethod(
        Invocation.method(
          #onTransition,
          [transition],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i3.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
  @override
  void onChange(_i4.Change<_i2.AlertsScreenState>? change) =>
      super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [AlertService].
///
/// See the documentation for Mockito's code generation for more information.
class MockAlertService extends _i1.Mock implements _i5.AlertService {
  MockAlertService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<List<_i6.Alert>> getAlerts({
    required int? userId,
    required String? userToken,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAlerts,
          [],
          {
            #userId: userId,
            #userToken: userToken,
          },
        ),
        returnValue: _i3.Future<List<_i6.Alert>>.value(<_i6.Alert>[]),
      ) as _i3.Future<List<_i6.Alert>>);
  @override
  _i3.Future<_i6.Alert?> getAlert({
    required int? alertId,
    required dynamic userToken,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAlert,
          [],
          {
            #alertId: alertId,
            #userToken: userToken,
          },
        ),
        returnValue: _i3.Future<_i6.Alert?>.value(),
      ) as _i3.Future<_i6.Alert?>);
  @override
  _i3.Future<bool> deleteAlert({
    required int? alertId,
    required dynamic userToken,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteAlert,
          [],
          {
            #alertId: alertId,
            #userToken: userToken,
          },
        ),
        returnValue: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);
  @override
  _i3.Future<bool> createAlert({
    required Map<String, dynamic>? alert,
    required dynamic userToken,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #createAlert,
          [],
          {
            #alert: alert,
            #userToken: userToken,
          },
        ),
        returnValue: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);
  @override
  _i3.Future<bool> updateAlert({
    required Map<String, dynamic>? alert,
    required dynamic userToken,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateAlert,
          [],
          {
            #alert: alert,
            #userToken: userToken,
          },
        ),
        returnValue: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);
}
